name: Android Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g. v1.0.0)'
        required: true
        default: 'v1.0.0'
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-android:
    name: Build Android and Create Release
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v5

      # Step 2: Setup Node.js (16.9+ for Corepack)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      # Step 3: Enable Corepack for Yarn 4
      - name: Enable Corepack (for Yarn 4)
        run: |
          corepack enable
          corepack prepare yarn@4.10.3 --activate

      # Step 4: Setup Expo and EAS
      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
          packager: npm

      # Step 5: Install dependencies
      - name: Install dependencies
        run: yarn install --immutable

      # Step 6: ÁîüÊàê drizzle-kit Êï∞ÊçÆÂ∫ì
      - name: Generate drizzle-kit
        run: npx drizzle-kit generate

      # Step 7: Get version tag
      - name: Get version tag
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      # Step 8: Build Android on EAS (Expo Cloud)
      - name: Build Android on EAS
        id: build_android
        run: |
          echo "Building Android APK on EAS (version from package.json)..."
          eas build --platform android --profile production --non-interactive --no-wait --json > android_build.json
          BUILD_ID=$(cat android_build.json | jq -r '.[0].id')
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "ü§ñ Android Build ID: $BUILD_ID"
          echo "üîó View Android build: https://expo.dev/accounts/[your-account]/projects/cherry-studio/builds/$BUILD_ID"

      # Step 9: Wait for Android build to complete (ËΩÆËØ¢ÔºåÁõ¥Âà∞APK‰∫ßÂá∫)
      - name: Wait for Android build
        run: |
          echo "Waiting for Android build to complete..."
          BUILD_ID="${{ steps.build_android.outputs.build_id }}"
          while true; do
            STATUS=$(eas build:view $BUILD_ID --json | jq -r '.status')
            STATUS_LOWER=$(echo "$STATUS" | tr '[:upper:]' '[:lower:]')
            echo "Current status: $STATUS"
            if [ "$STATUS_LOWER" == "finished" ]; then
              echo "‚úÖ Build completed successfully!"
              break
            elif [ "$STATUS_LOWER" == "errored" ] || [ "$STATUS_LOWER" == "canceled" ]; then
              echo "‚ùå Build failed with status: $STATUS"
              echo "View build details at: https://expo.dev/accounts/[your-account]/projects/cherry-studio/builds/$BUILD_ID"
              exit 1
            elif [ -z "$STATUS" ]; then
              echo "‚ö†Ô∏è Failed to get build status, retrying..."
              sleep 10
              continue
            fi
            echo "‚è≥ Build still in progress, waiting 60 seconds..."
            sleep 60
          done

      # Step 10: Download Android APK
      - name: Download Android APK
        run: |
          BUILD_ID="${{ steps.build_android.outputs.build_id }}"
          ARTIFACT_URL=$(eas build:view $BUILD_ID --json | jq -r '.artifacts.buildUrl')
          curl -L -o Cherry-Studio-${{ steps.version.outputs.tag }}.apk "$ARTIFACT_URL"
          ls -lh Cherry-Studio-${{ steps.version.outputs.tag }}.apk

      # Step 11: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
